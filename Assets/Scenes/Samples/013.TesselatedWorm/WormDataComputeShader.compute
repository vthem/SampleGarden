// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#include "Packages/jp.keijiro.noiseshader/Shader/ClassicNoise2D.hlsl"

struct WormData
{
    float xDeviation;
    float yDeviation;
    float radius;
};

RWStructuredBuffer<WormData> _wormData;

int _seed;
float _xyPeriodScale;
float _yScale;
float _zWorld;

[numthreads(16,16,1)]
void CSMain (uint id : SV_GroupIndex)
{
    float xSeed = (_seed ^ 135823) * 0.12987;
    float ySeed = (_seed ^ 246973) * 0.49874;
    float rSeed = (_seed ^ 394398) * 0.23987;
    float2 x = float2((_zWorld + id) * _xyPeriodScale, xSeed);
    float2 y = float2((_zWorld + id) * _xyPeriodScale, ySeed);
    float2 r = float2((_zWorld + id) * _xyPeriodScale, rSeed);
    _wormData[id].xDeviation = ClassicNoise(x);
    _wormData[id].yDeviation = ClassicNoise(y);
    _wormData[id].radius = ClassicNoise(r);
}
